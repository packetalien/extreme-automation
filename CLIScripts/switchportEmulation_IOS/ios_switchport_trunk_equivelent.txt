#USAGE: load script vtrunk <portno>


disable clipaging
set var eport $CLI.ARGV1
set var CLI.OUT 0
show vlan
set var shvlan $TCL(split ${CLI.OUT} "\n")
set var vlidx $TCL(lsearch -glob $shvlan *Total*)
set var vlast $TCL(lsearch -glob $shvlan *Flags\ \:*)
set var vlast ($vlast - 1)
set var vlidx ($vlidx + 2)
while ($vlidx < $vlast) do
   set var vline $TCL(lindex $shvlan $vlidx)
   set var vmgmt $TCL(regexp -nocase {VR-Mgmt} $vline)
   if ($vmgmt != 1) then
      set var vname $TCL(lindex $vline 0)
      set var CLI.OUT 0
      show vlan $vname
      set var shvland $TCL(split ${CLI.OUT} "\n")
      set var vqtag $TCL(lsearch -glob $shvland *802.1Q*)
      set var vqtag $TCL(expr ($vqtag > 0))
      set var vdef $TCL(regexp {Default} $vname)
      set var vqtag ($vqtag - $vdef)
      if ($vqtag == 1) then
         config vlan $vname add port $eport tag
      endif
   endif
   set var vlidx ($vlidx + 1)
endwhile
enable clipaging



#### Its inverse

#USAGE: load script vuntrunk <portno>

disable clipaging
set var eport $CLI.ARGV1
set var CLI.OUT 0
show vlan
set var shvlan $TCL(split ${CLI.OUT} "\n")
set var vlidx $TCL(lsearch -glob $shvlan *Total*)
set var vlast $TCL(lsearch -glob $shvlan *Flags\ \:*)
set var vlast ($vlast - 1)
set var vlidx ($vlidx + 2)
while ($vlidx < $vlast) do
   set var vline $TCL(lindex $shvlan $vlidx)
   set var vmgmt $TCL(regexp -nocase {VR-Mgmt} $vline)
   if ($vmgmt != 1) then
      set var vname $TCL(lindex $vline 0)
      set var CLI.OUT 0
      show vlan $vname
      set var shvland $TCL(split ${CLI.OUT} "\n")
      set var vqtag $TCL(lsearch -glob $shvland *802.1Q*)
      set var vqtag $TCL(expr ($vqtag > 0))
      set var vdef $TCL(regexp {Default} $vname)
      set var vqtag ($vqtag - $vdef)
      if ($vqtag == 1) then
         config vlan $vname del port $eport
      endif
   endif
   set var vlidx ($vlidx + 1)
endwhile
enable clipaging