<!-- This file is generated by EPICenter. Do not edit this file. -->
<script name="Create SVLAN">
  <comments>Factory script to Create and provision new SVLAN</comments>
  <content># @METADATASTART
#@DetailDescriptionStart
#############################################################################
# Extreme Networks(R) CLI Scripting Library
# Note:  This script is an example and has undergone limited testing.  Please modify and test for your own environment.
# Script        : SVLAN Creation
# Revision      : 1.0
# Last Updated  : Jan 24, 2008
#
# Purpose:  Create and configure a VLAN
#
#
#1.  Create Tagged or Untagged VLAN
#2.  Configure layer 3 setting for the VLAN
#3.  Enable/Disable IP forwarding for the VLAN
#4.  Assign the VLAN to a QoS Profile
#5.  add the VLAN to a EAPS domain
#6.  apply protocol filter to the VLAN
#
#####################################################################
#@DetailDescriptionEnd

# @ScriptDescription &quot;Basic best practice deployment of Extreme switches. Please see Script View tab for details.&quot;
# @SectionStart ( description = &quot;VLAN Basics&quot;)
# @VariableFieldLabel ( description = &quot;Abort on error?&quot;,
#	type	      = String,
#   scope       = global,
#   required    = yes,
#   validValues=[yes,no])
set var abort_when_error yes

################################################################################
# VLAN Definition
################################################################################
# @VariableFieldLabel (description = &quot;SVLAN Name&quot;,
#	  type        = String,
#     scope       = global,
#	  required    = yes
#	)
set var svlanname enterNewSvlan

# @VariableFieldLabel (description   = &quot;SVLAN Tag&quot;, type = String,
#          scope         = global
#	)
set var svlannametag &quot;&quot;

# @VariableFieldLabel (description   = &quot;QoS Profile (eg. leave blank for default QoS)&quot;
#	  type          = String,
#     scope         = global
#	)
set var svlannameqos &quot;&quot;

# @VariableFieldLabel (description = &quot;tagged ports&quot;
#	  type        = String
#     scope       = device
#	)
set var taggedPorts  &quot;&quot;

# @VariableFieldLabel (description   = &quot;untagged ports&quot;,
#	  type        = String
#     scope       = device
#	)
set var untaggedPorts  &quot;&quot;

# @SectionEnd

# @MetaDataEnd
################################################################################
################################################################################
# CONFIGURATION DETAIL
################################################################################
################################################################################
# CLI MODE
################################################################################
IF ($abort_when_error == false) THEN
 configure cli mode scripting ignore-error
ELSE
  configure cli mode scripting abort-on-error
ENDIF

IF (![string equal $vendor &quot;Extreme&quot;]) THEN
   error &quot;This script is only supported for Extreme switches.&quot;
ENDIF


################################################################################
# SVLAN 1 Creation Parameters
################################################################################  

# Getting SVLAN from switch for error check

#set var CLI.OUT &quot; &quot;
#show svlan
#set var myNewCliOut $TCL(split ${CLI.OUT} &quot;\n&quot;)
#set var mytest $TCL(regexp -nocase $myNewCliOut {$svlanname})

#if {[catch {($mytest) 

create svlan $svlanname

#} result ]} { 
#     error &quot;Error, SVLAN Already Exists.&quot;      
#   }

if {[catch {

  IF ([expr [string length $svlannametag] &gt; 0]) THEN
    config svlan $svlanname tag $svlannametag
  ENDIF

if ($TCL(string equal $svlannameqos yes)) then
    config svlan $svlanname qosprofile $svlannameqos
endif

IF ([expr [string length $taggedPorts] &gt; 0]) THEN
  configure svlan $svlanname add port $taggedPorts tagged 
  regexp {.*Adding EAPS ring ports to a VLAN could cause a loop.*} ${CLI.OUT} foundit
  IF ([info exists foundit]) THEN
      yes
  ENDIF 
ENDIF
IF ([expr [string length $untaggedPorts] &gt; 0]) THEN
  configure svlan $svlanname add port $untaggedPorts untagged 
  regexp {.*Adding EAPS ring ports to a VLAN could cause a loop.*} ${CLI.OUT} foundit
  IF ([info exists foundit]) THEN
      yes
  ENDIF 
ENDIF

# sync vlans on this device so that new vlan is shown in the client
PerformSync -scope VLAN
} result ]} { 
     error &quot;Error occured during vlan configuration. $result&quot;	  
   }


</content>
  <creator>admin</creator>
  <contexts>,Device,</contexts>
  <supprotedGroups></supprotedGroups>
  <roles>,Administrator,</roles>
  <auditLogEnabled>true</auditLogEnabled>
  <saveConfigOnExit>true</saveConfigOnExit>
  <menuScope>TOOLS</menuScope>
  <scriptTimeout>60</scriptTimeout>
</script>