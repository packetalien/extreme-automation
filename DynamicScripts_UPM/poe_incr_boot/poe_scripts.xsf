 # ----Slot_1----
 if ($VAREXISTS(slot_1)) then 
  set var slotsSplit $TCL(split ${slot_1} , )
  set var finalList $TCL(join ${slotsSplit})
  set var bP $TCL(llength ${finalList})
  	create log entry "Slot_1 has $(bP) inline-power ports"
  set var pX $TCL(expr round($AW_1 / $OL_1))
 if ($bP > $pX) then
  set var i 0
 while ($i < $bP) do
 if ($i <= $pX) then
  set var boot $TCL(lindex ${finalList} $i)
  	create log entry "enable inline-power ports $(boot)"
	enable inline-power ports $(boot)
 endif
 if ($i == $pX) then
  set var mtime $TCL(clock format [clock seconds])
   	create log entry "Wait for POE Devices to Boot! - Current Time is $(mtime)"
  set var wait $TCL(after $poeBootTime)
  set var mtime $TCL(clock format [clock seconds])
   	create log entry "Continue with script - Current Time is $(mtime)"
  set var CLI.OUT " "
  show inline-power slot 1
  set var inputA $TCL(list ${CLI.OUT})
  set var listA $TCL(split $inputA "\n")
  set var countA $TCL(llength $listA)
  set var icountBack ($countA - 0)
  set var icount 0
 while ($icount < $icountBack) do
  set var findIt $TCL(lindex $listA $icount)
  set var mP $TCL(regexp {(\d\s+Enabled\s+Operational\s+\d+\s+W\s+)(\d+)(\s+W\s+\w+)} $findIt)
 if ($mP == 1) then
  set var mPwatts $TCL(regexp -inline {(\d\s+Enabled\s+Operational\s+\d+\s+W\s+)(\d+)(\s+W\s+\w+)} $findIt)
  set var value2 $TCL(lindex $mPwatts 2)
 endif
  set var icount ($icount + 1)
 endwhile
   set var PS $TCL(expr round($AW_1 - $value2))
   set var nextBp $TCL(expr round($PS / $OL_1))
   set var pX $TCL(expr ($nextBp + $i))
 endif
  set var i ($i + 1)
 endwhile
 else 
  	create log entry "Note: Slot_1 has enough power to enable all ports"
  set var j 0
 while ($j < $bP) do
  set var boot $TCL(lindex ${finalList} $j)
  	create log entry "enable inline-power ports $(boot)"
	enable inline-power ports $(boot)
  set var j ($j + 1)
 endwhile
 endif
	if ($VAREXISTS(findIt)) then 
	delete var findIt
	endif
	if ($VAREXISTS(inputA)) then 
	delete var inputA
	endif
	 if ($VAREXISTS(listA)) then 
	delete var listA
	endif
	 if ($VAREXISTS(countA)) then 
	delete var countA
	endif
	 if ($VAREXISTS(icountBack)) then 
	delete var icountBack
	endif
	 if ($VAREXISTS(icount)) then 
	delete var icount
	endif
	 if ($VAREXISTS(value2)) then 
	delete var value2
	endif
	 if ($VAREXISTS(mPwatts)) then 
	delete var mPwatts
	endif
	 if ($VAREXISTS(slotsSplit)) then 
	delete var slotsSplit   
	 endif         
	 if ($VAREXISTS(wait)) then                             
	delete var wait   
	endif                     
	 if ($VAREXISTS(xError)) then 
	delete var xError  
	endif
	 if ($VAREXISTS(mtime)) then 
	delete var mtime      
	endif                 
	 if ($VAREXISTS(i)) then 
	delete var i  
	endif                  
	 if ($VAREXISTS(nextBp)) then 
	delete var nextBp        
	endif                            
	 if ($VAREXISTS(PS)) then 
	delete var PS   
	endif                       
	 if ($VAREXISTS(pX)) then 
	delete var pX 
	endif
	 if ($VAREXISTS(i)) then 
	delete var i 
	endif
	 if ($VAREXISTS(j)) then 
	delete var j
	endif
	 if ($VAREXISTS(boot)) then 
	delete var boot
	endif
	 if ($VAREXISTS(bP)) then 
	delete var bP
	endif
	 if ($VAREXISTS(finalList)) then 
	delete var finalList  
	endif
	 if ($VAREXISTS(slot_1)) then 
	delete var slot_1     
	endif                 
	 if ($VAREXISTS(AW_1)) then 
	delete var AW_1
	endif
	 if ($VAREXISTS(OL_1)) then 
	delete var OL_1
	endif
	 if ($VAREXISTS(poeBootTime)) then 
	delete var poeBootTime
	endif
	 if ($VAREXISTS(mP)) then 
	delete var mP
	endif
 endif
 # ----Slot_2----
 if ($VAREXISTS(slot_2)) then 
  set var slotsSplit $TCL(split ${slot_2} , )
  set var finalList $TCL(join ${slotsSplit})
  set var bP $TCL(llength ${finalList})
  	create log entry "Slot_2 has $(bP) inline-power ports"
  set var pX $TCL(expr round($AW_2 / $OL_2))
 if ($bP > $pX) then
  set var i 0
 while ($i < $bP) do
 if ($i <= $pX) then
  set var boot $TCL(lindex ${finalList} $i)
  	create log entry "enable inline-power ports $(boot)"
	enable inline-power ports $(boot)
 endif
 if ($i == $pX) then
  set var mtime $TCL(clock format [clock seconds])
   	create log entry "Wait for POE Devices to Boot! - Current Time is $(mtime)"
  set var wait $TCL(after $poeBootTime)
  set var mtime $TCL(clock format [clock seconds])
   	create log entry "Continue with script - Current Time is $(mtime)"
  set var CLI.OUT " "
  show inline-power slot 2
  set var inputA $TCL(list ${CLI.OUT})
  set var listA $TCL(split $inputA "\n")
  set var countA $TCL(llength $listA)
  set var icountBack ($countA - 0)
  set var icount 0
 while ($icount < $icountBack) do
  set var findIt $TCL(lindex $listA $icount)
  set var mP $TCL(regexp {(\d\s+Enabled\s+Operational\s+\d+\s+W\s+)(\d+)(\s+W\s+\w+)} $findIt)
 if ($mP == 1) then
  set var mPwatts $TCL(regexp -inline {(\d\s+Enabled\s+Operational\s+\d+\s+W\s+)(\d+)(\s+W\s+\w+)} $findIt)
  set var value2 $TCL(lindex $mPwatts 2)
 endif
  set var icount ($icount + 1)
 endwhile
   set var PS $TCL(expr round($AW_2 - $value2))
   set var nextBp $TCL(expr round($PS / $OL_2))
   set var pX $TCL(expr ($nextBp + $i))
 endif
  set var i ($i + 1)
 endwhile
 else 
  	create log entry "Note: Slot_2 has enough power to enable all ports"
  set var j 0
 while ($j < $bP) do
  set var boot $TCL(lindex ${finalList} $j)
  	create log entry "enable inline-power ports $(boot)"
	enable inline-power ports $(boot)
  set var j ($j + 1)
 endwhile
 endif
	if ($VAREXISTS(findIt)) then 
	delete var findIt
	endif
	if ($VAREXISTS(inputA)) then 
	delete var inputA
	endif
	 if ($VAREXISTS(listA)) then 
	delete var listA
	endif
	 if ($VAREXISTS(countA)) then 
	delete var countA
	endif
	 if ($VAREXISTS(icountBack)) then 
	delete var icountBack
	endif
	 if ($VAREXISTS(icount)) then 
	delete var icount
	endif
	 if ($VAREXISTS(value2)) then 
	delete var value2
	endif
	 if ($VAREXISTS(mPwatts)) then 
	delete var mPwatts
	endif
	 if ($VAREXISTS(slotsSplit)) then 
	delete var slotsSplit   
	 endif         
	 if ($VAREXISTS(wait)) then                             
	delete var wait   
	endif                     
	 if ($VAREXISTS(xError)) then 
	delete var xError  
	endif
	 if ($VAREXISTS(mtime)) then 
	delete var mtime      
	endif                 
	 if ($VAREXISTS(i)) then 
	delete var i  
	endif                  
	 if ($VAREXISTS(nextBp)) then 
	delete var nextBp        
	endif                            
	 if ($VAREXISTS(PS)) then 
	delete var PS   
	endif                       
	 if ($VAREXISTS(pX)) then 
	delete var pX 
	endif
	 if ($VAREXISTS(i)) then 
	delete var i 
	endif
	 if ($VAREXISTS(j)) then 
	delete var j
	endif
	 if ($VAREXISTS(boot)) then 
	delete var boot
	endif
	 if ($VAREXISTS(bP)) then 
	delete var bP
	endif
	 if ($VAREXISTS(finalList)) then 
	delete var finalList  
	endif
	 if ($VAREXISTS(slot_2)) then 
	delete var slot_2     
	endif                 
	 if ($VAREXISTS(AW_2)) then 
	delete var AW_2
	endif
	 if ($VAREXISTS(OL_2)) then 
	delete var OL_2
	endif
	 if ($VAREXISTS(poeBootTime)) then 
	delete var poeBootTime
	endif
	 if ($VAREXISTS(mP)) then 
	delete var mP
	endif
 endif
 # ----Slot_3----
 if ($VAREXISTS(slot_3)) then 
  set var slotsSplit $TCL(split ${slot_3} , )
  set var finalList $TCL(join ${slotsSplit})
  set var bP $TCL(llength ${finalList})
  	create log entry "Slot_3 has $(bP) inline-power ports"
  set var pX $TCL(expr round($AW_3 / $OL_3))
 if ($bP > $pX) then
  set var i 0
 while ($i < $bP) do
 if ($i <= $pX) then
  set var boot $TCL(lindex ${finalList} $i)
  	create log entry "enable inline-power ports $(boot)"
	enable inline-power ports $(boot)
 endif
 if ($i == $pX) then
  set var mtime $TCL(clock format [clock seconds])
   	create log entry "Wait for POE Devices to Boot! - Current Time is $(mtime)"
  set var wait $TCL(after $poeBootTime)
  set var mtime $TCL(clock format [clock seconds])
   	create log entry "Continue with script - Current Time is $(mtime)"
  set var CLI.OUT " "
  show inline-power slot 3
  set var inputA $TCL(list ${CLI.OUT})
  set var listA $TCL(split $inputA "\n")
  set var countA $TCL(llength $listA)
  set var icountBack ($countA - 0)
  set var icount 0
 while ($icount < $icountBack) do
  set var findIt $TCL(lindex $listA $icount)
  set var mP $TCL(regexp {(\d\s+Enabled\s+Operational\s+\d+\s+W\s+)(\d+)(\s+W\s+\w+)} $findIt)
 if ($mP == 1) then
  set var mPwatts $TCL(regexp -inline {(\d\s+Enabled\s+Operational\s+\d+\s+W\s+)(\d+)(\s+W\s+\w+)} $findIt)
  set var value2 $TCL(lindex $mPwatts 2)
 endif
  set var icount ($icount + 1)
 endwhile
   set var PS $TCL(expr round($AW_3 - $value2))
   set var nextBp $TCL(expr round($PS / $OL_3))
   set var pX $TCL(expr ($nextBp + $i))
 endif
  set var i ($i + 1)
 endwhile
 else 
  	create log entry "Note: Slot_3 has enough power to enable all ports"
  set var j 0
 while ($j < $bP) do
  set var boot $TCL(lindex ${finalList} $j)
  	create log entry "enable inline-power ports $(boot)"
	enable inline-power ports $(boot)
  set var j ($j + 1)
 endwhile
 endif
	if ($VAREXISTS(findIt)) then 
	delete var findIt
	endif
	if ($VAREXISTS(inputA)) then 
	delete var inputA
	endif
	 if ($VAREXISTS(listA)) then 
	delete var listA
	endif
	 if ($VAREXISTS(countA)) then 
	delete var countA
	endif
	 if ($VAREXISTS(icountBack)) then 
	delete var icountBack
	endif
	 if ($VAREXISTS(icount)) then 
	delete var icount
	endif
	 if ($VAREXISTS(value2)) then 
	delete var value2
	endif
	 if ($VAREXISTS(mPwatts)) then 
	delete var mPwatts
	endif
	 if ($VAREXISTS(slotsSplit)) then 
	delete var slotsSplit   
	 endif         
	 if ($VAREXISTS(wait)) then                             
	delete var wait   
	endif                     
	 if ($VAREXISTS(xError)) then 
	delete var xError  
	endif
	 if ($VAREXISTS(mtime)) then 
	delete var mtime      
	endif                 
	 if ($VAREXISTS(i)) then 
	delete var i  
	endif                  
	 if ($VAREXISTS(nextBp)) then 
	delete var nextBp        
	endif                            
	 if ($VAREXISTS(PS)) then 
	delete var PS   
	endif                       
	 if ($VAREXISTS(pX)) then 
	delete var pX 
	endif
	 if ($VAREXISTS(i)) then 
	delete var i 
	endif
	 if ($VAREXISTS(j)) then 
	delete var j
	endif
	 if ($VAREXISTS(boot)) then 
	delete var boot
	endif
	 if ($VAREXISTS(bP)) then 
	delete var bP
	endif
	 if ($VAREXISTS(finalList)) then 
	delete var finalList  
	endif
	 if ($VAREXISTS(slot_3)) then 
	delete var slot_3     
	endif                 
	 if ($VAREXISTS(AW_3)) then 
	delete var AW_3
	endif
	 if ($VAREXISTS(OL_3)) then 
	delete var OL_3
	endif
	 if ($VAREXISTS(poeBootTime)) then 
	delete var poeBootTime
	endif
	 if ($VAREXISTS(mP)) then 
	delete var mP
	endif
 endif
 # ----Slot_4----
 if ($VAREXISTS(slot_4)) then 
  set var slotsSplit $TCL(split ${slot_4} , )
  set var finalList $TCL(join ${slotsSplit})
  set var bP $TCL(llength ${finalList})
  	create log entry "Slot_4 has $(bP) inline-power ports"
  set var pX $TCL(expr round($AW_4 / $OL_4))
 if ($bP > $pX) then
  set var i 0
 while ($i < $bP) do
 if ($i <= $pX) then
  set var boot $TCL(lindex ${finalList} $i)
  	create log entry "enable inline-power ports $(boot)"
	enable inline-power ports $(boot)
 endif
 if ($i == $pX) then
  set var mtime $TCL(clock format [clock seconds])
   	create log entry "Wait for POE Devices to Boot! - Current Time is $(mtime)"
  set var wait $TCL(after $poeBootTime)
  set var mtime $TCL(clock format [clock seconds])
   	create log entry "Continue with script - Current Time is $(mtime)"
  set var CLI.OUT " "
  show inline-power slot 4
  set var inputA $TCL(list ${CLI.OUT})
  set var listA $TCL(split $inputA "\n")
  set var countA $TCL(llength $listA)
  set var icountBack ($countA - 0)
  set var icount 0
 while ($icount < $icountBack) do
  set var findIt $TCL(lindex $listA $icount)
  set var mP $TCL(regexp {(\d\s+Enabled\s+Operational\s+\d+\s+W\s+)(\d+)(\s+W\s+\w+)} $findIt)
 if ($mP == 1) then
  set var mPwatts $TCL(regexp -inline {(\d\s+Enabled\s+Operational\s+\d+\s+W\s+)(\d+)(\s+W\s+\w+)} $findIt)
  set var value2 $TCL(lindex $mPwatts 2)
 endif
  set var icount ($icount + 1)
 endwhile
   set var PS $TCL(expr round($AW_4 - $value2))
   set var nextBp $TCL(expr round($PS / $OL_4))
   set var pX $TCL(expr ($nextBp + $i))
 endif
  set var i ($i + 1)
 endwhile
 else 
  	create log entry "Note: Slot_4 has enough power to enable all ports"
  set var j 0
 while ($j < $bP) do
  set var boot $TCL(lindex ${finalList} $j)
  	create log entry "enable inline-power ports $(boot)"
	enable inline-power ports $(boot)
  set var j ($j + 1)
 endwhile
 endif
	if ($VAREXISTS(findIt)) then 
	delete var findIt
	endif
	if ($VAREXISTS(inputA)) then 
	delete var inputA
	endif
	 if ($VAREXISTS(listA)) then 
	delete var listA
	endif
	 if ($VAREXISTS(countA)) then 
	delete var countA
	endif
	 if ($VAREXISTS(icountBack)) then 
	delete var icountBack
	endif
	 if ($VAREXISTS(icount)) then 
	delete var icount
	endif
	 if ($VAREXISTS(value2)) then 
	delete var value2
	endif
	 if ($VAREXISTS(mPwatts)) then 
	delete var mPwatts
	endif
	 if ($VAREXISTS(slotsSplit)) then 
	delete var slotsSplit   
	 endif         
	 if ($VAREXISTS(wait)) then                             
	delete var wait   
	endif                     
	 if ($VAREXISTS(xError)) then 
	delete var xError  
	endif
	 if ($VAREXISTS(mtime)) then 
	delete var mtime      
	endif                 
	 if ($VAREXISTS(i)) then 
	delete var i  
	endif                  
	 if ($VAREXISTS(nextBp)) then 
	delete var nextBp        
	endif                            
	 if ($VAREXISTS(PS)) then 
	delete var PS   
	endif                       
	 if ($VAREXISTS(pX)) then 
	delete var pX 
	endif
	 if ($VAREXISTS(i)) then 
	delete var i 
	endif
	 if ($VAREXISTS(j)) then 
	delete var j
	endif
	 if ($VAREXISTS(boot)) then 
	delete var boot
	endif
	 if ($VAREXISTS(bP)) then 
	delete var bP
	endif
	 if ($VAREXISTS(finalList)) then 
	delete var finalList  
	endif
	 if ($VAREXISTS(slot_4)) then 
	delete var slot_4     
	endif                 
	 if ($VAREXISTS(AW_4)) then 
	delete var AW_4
	endif
	 if ($VAREXISTS(OL_4)) then 
	delete var OL_4
	endif
	 if ($VAREXISTS(poeBootTime)) then 
	delete var poeBootTime
	endif
	 if ($VAREXISTS(mP)) then 
	delete var mP
	endif
 endif
 # ----Slot_5----
 if ($VAREXISTS(slot_5)) then 
  set var slotsSplit $TCL(split ${slot_5} , )
  set var finalList $TCL(join ${slotsSplit})
  set var bP $TCL(llength ${finalList})
  	create log entry "Slot_5 has $(bP) inline-power ports"
  set var pX $TCL(expr round($AW_5 / $OL_5))
 if ($bP > $pX) then
  set var i 0
 while ($i < $bP) do
 if ($i <= $pX) then
  set var boot $TCL(lindex ${finalList} $i)
  	create log entry "enable inline-power ports $(boot)"
	enable inline-power ports $(boot)
 endif
 if ($i == $pX) then
  set var mtime $TCL(clock format [clock seconds])
   	create log entry "Wait for POE Devices to Boot! - Current Time is $(mtime)"
  set var wait $TCL(after $poeBootTime)
  set var mtime $TCL(clock format [clock seconds])
   	create log entry "Continue with script - Current Time is $(mtime)"
  set var CLI.OUT " "
  show inline-power slot 5
  set var inputA $TCL(list ${CLI.OUT})
  set var listA $TCL(split $inputA "\n")
  set var countA $TCL(llength $listA)
  set var icountBack ($countA - 0)
  set var icount 0
 while ($icount < $icountBack) do
  set var findIt $TCL(lindex $listA $icount)
  set var mP $TCL(regexp {(\d\s+Enabled\s+Operational\s+\d+\s+W\s+)(\d+)(\s+W\s+\w+)} $findIt)
 if ($mP == 1) then
  set var mPwatts $TCL(regexp -inline {(\d\s+Enabled\s+Operational\s+\d+\s+W\s+)(\d+)(\s+W\s+\w+)} $findIt)
  set var value2 $TCL(lindex $mPwatts 2)
 endif
  set var icount ($icount + 1)
 endwhile
   set var PS $TCL(expr round($AW_5 - $value2))
   set var nextBp $TCL(expr round($PS / $OL_5))
   set var pX $TCL(expr ($nextBp + $i))
 endif
  set var i ($i + 1)
 endwhile
 else 
  	create log entry "Note: Slot_5 has enough power to enable all ports"
  set var j 0
 while ($j < $bP) do
  set var boot $TCL(lindex ${finalList} $j)
  	create log entry "enable inline-power ports $(boot)"
	enable inline-power ports $(boot)
  set var j ($j + 1)
 endwhile
 endif
	if ($VAREXISTS(findIt)) then 
	delete var findIt
	endif
	if ($VAREXISTS(inputA)) then 
	delete var inputA
	endif
	 if ($VAREXISTS(listA)) then 
	delete var listA
	endif
	 if ($VAREXISTS(countA)) then 
	delete var countA
	endif
	 if ($VAREXISTS(icountBack)) then 
	delete var icountBack
	endif
	 if ($VAREXISTS(icount)) then 
	delete var icount
	endif
	 if ($VAREXISTS(value2)) then 
	delete var value2
	endif
	 if ($VAREXISTS(mPwatts)) then 
	delete var mPwatts
	endif
	 if ($VAREXISTS(slotsSplit)) then 
	delete var slotsSplit   
	 endif         
	 if ($VAREXISTS(wait)) then                             
	delete var wait   
	endif                     
	 if ($VAREXISTS(xError)) then 
	delete var xError  
	endif
	 if ($VAREXISTS(mtime)) then 
	delete var mtime      
	endif                 
	 if ($VAREXISTS(i)) then 
	delete var i  
	endif                  
	 if ($VAREXISTS(nextBp)) then 
	delete var nextBp        
	endif                            
	 if ($VAREXISTS(PS)) then 
	delete var PS   
	endif                       
	 if ($VAREXISTS(pX)) then 
	delete var pX 
	endif
	 if ($VAREXISTS(i)) then 
	delete var i 
	endif
	 if ($VAREXISTS(j)) then 
	delete var j
	endif
	 if ($VAREXISTS(boot)) then 
	delete var boot
	endif
	 if ($VAREXISTS(bP)) then 
	delete var bP
	endif
	 if ($VAREXISTS(finalList)) then 
	delete var finalList  
	endif
	 if ($VAREXISTS(slot_5)) then 
	delete var slot_5     
	endif                 
	 if ($VAREXISTS(AW_5)) then 
	delete var AW_5
	endif
	 if ($VAREXISTS(OL_5)) then 
	delete var OL_5
	endif
	 if ($VAREXISTS(poeBootTime)) then 
	delete var poeBootTime
	endif
	 if ($VAREXISTS(mP)) then 
	delete var mP
	endif
 endif
 # ----Slot_6----
 if ($VAREXISTS(slot_6)) then 
  set var slotsSplit $TCL(split ${slot_6} , )
  set var finalList $TCL(join ${slotsSplit})
  set var bP $TCL(llength ${finalList})
  	create log entry "Slot_6 has $(bP) inline-power ports"
  set var pX $TCL(expr round($AW_6 / $OL_6))
 if ($bP > $pX) then
  set var i 0
 while ($i < $bP) do
 if ($i <= $pX) then
  set var boot $TCL(lindex ${finalList} $i)
  	create log entry "enable inline-power ports $(boot)"
	enable inline-power ports $(boot)
 endif
 if ($i == $pX) then
  set var mtime $TCL(clock format [clock seconds])
   	create log entry "Wait for POE Devices to Boot! - Current Time is $(mtime)"
  set var wait $TCL(after $poeBootTime)
  set var mtime $TCL(clock format [clock seconds])
   	create log entry "Continue with script - Current Time is $(mtime)"
  set var CLI.OUT " "
  show inline-power slot 6
  set var inputA $TCL(list ${CLI.OUT})
  set var listA $TCL(split $inputA "\n")
  set var countA $TCL(llength $listA)
  set var icountBack ($countA - 0)
  set var icount 0
 while ($icount < $icountBack) do
  set var findIt $TCL(lindex $listA $icount)
  set var mP $TCL(regexp {(\d\s+Enabled\s+Operational\s+\d+\s+W\s+)(\d+)(\s+W\s+\w+)} $findIt)
 if ($mP == 1) then
  set var mPwatts $TCL(regexp -inline {(\d\s+Enabled\s+Operational\s+\d+\s+W\s+)(\d+)(\s+W\s+\w+)} $findIt)
  set var value2 $TCL(lindex $mPwatts 2)
 endif
  set var icount ($icount + 1)
 endwhile
   set var PS $TCL(expr round($AW_6 - $value2))
   set var nextBp $TCL(expr round($PS / $OL_6))
   set var pX $TCL(expr ($nextBp + $i))
 endif
  set var i ($i + 1)
 endwhile
 else 
  	create log entry "Note: Slot_6 has enough power to enable all ports"
  set var j 0
 while ($j < $bP) do
  set var boot $TCL(lindex ${finalList} $j)
  	create log entry "enable inline-power ports $(boot)"
	enable inline-power ports $(boot)
  set var j ($j + 1)
 endwhile
 endif
	if ($VAREXISTS(findIt)) then 
	delete var findIt
	endif
	if ($VAREXISTS(inputA)) then 
	delete var inputA
	endif
	 if ($VAREXISTS(listA)) then 
	delete var listA
	endif
	 if ($VAREXISTS(countA)) then 
	delete var countA
	endif
	 if ($VAREXISTS(icountBack)) then 
	delete var icountBack
	endif
	 if ($VAREXISTS(icount)) then 
	delete var icount
	endif
	 if ($VAREXISTS(value2)) then 
	delete var value2
	endif
	 if ($VAREXISTS(mPwatts)) then 
	delete var mPwatts
	endif
	 if ($VAREXISTS(slotsSplit)) then 
	delete var slotsSplit   
	 endif         
	 if ($VAREXISTS(wait)) then                             
	delete var wait   
	endif                     
	 if ($VAREXISTS(xError)) then 
	delete var xError  
	endif
	 if ($VAREXISTS(mtime)) then 
	delete var mtime      
	endif                 
	 if ($VAREXISTS(i)) then 
	delete var i  
	endif                  
	 if ($VAREXISTS(nextBp)) then 
	delete var nextBp        
	endif                            
	 if ($VAREXISTS(PS)) then 
	delete var PS   
	endif                       
	 if ($VAREXISTS(pX)) then 
	delete var pX 
	endif
	 if ($VAREXISTS(i)) then 
	delete var i 
	endif
	 if ($VAREXISTS(j)) then 
	delete var j
	endif
	 if ($VAREXISTS(boot)) then 
	delete var boot
	endif
	 if ($VAREXISTS(bP)) then 
	delete var bP
	endif
	 if ($VAREXISTS(finalList)) then 
	delete var finalList  
	endif
	 if ($VAREXISTS(slot_6)) then 
	delete var slot_6     
	endif                 
	 if ($VAREXISTS(AW_6)) then 
	delete var AW_6
	endif
	 if ($VAREXISTS(OL_6)) then 
	delete var OL_6
	endif
	 if ($VAREXISTS(poeBootTime)) then 
	delete var poeBootTime
	endif
	 if ($VAREXISTS(mP)) then 
	delete var mP
	endif
 endif
 # ----Slot_7----
 if ($VAREXISTS(slot_7)) then 
  set var slotsSplit $TCL(split ${slot_7} , )
  set var finalList $TCL(join ${slotsSplit})
  set var bP $TCL(llength ${finalList})
  	create log entry "Slot_7 has $(bP) inline-power ports"
  set var pX $TCL(expr round($AW_7 / $OL_7))
 if ($bP > $pX) then
  set var i 0
 while ($i < $bP) do
 if ($i <= $pX) then
  set var boot $TCL(lindex ${finalList} $i)
  	create log entry "enable inline-power ports $(boot)"
	enable inline-power ports $(boot)
 endif
 if ($i == $pX) then
  set var mtime $TCL(clock format [clock seconds])
   	create log entry "Wait for POE Devices to Boot! - Current Time is $(mtime)"
  set var wait $TCL(after $poeBootTime)
  set var mtime $TCL(clock format [clock seconds])
   	create log entry "Continue with script - Current Time is $(mtime)"
  set var CLI.OUT " "
  show inline-power slot 7
  set var inputA $TCL(list ${CLI.OUT})
  set var listA $TCL(split $inputA "\n")
  set var countA $TCL(llength $listA)
  set var icountBack ($countA - 0)
  set var icount 0
 while ($icount < $icountBack) do
  set var findIt $TCL(lindex $listA $icount)
  set var mP $TCL(regexp {(\d\s+Enabled\s+Operational\s+\d+\s+W\s+)(\d+)(\s+W\s+\w+)} $findIt)
 if ($mP == 1) then
  set var mPwatts $TCL(regexp -inline {(\d\s+Enabled\s+Operational\s+\d+\s+W\s+)(\d+)(\s+W\s+\w+)} $findIt)
  set var value2 $TCL(lindex $mPwatts 2)
 endif
  set var icount ($icount + 1)
 endwhile
   set var PS $TCL(expr round($AW_7 - $value2))
   set var nextBp $TCL(expr round($PS / $OL_7))
   set var pX $TCL(expr ($nextBp + $i))
 endif
  set var i ($i + 1)
 endwhile
 else 
  	create log entry "Note: Slot_7 has enough power to enable all ports"
  set var j 0
 while ($j < $bP) do
  set var boot $TCL(lindex ${finalList} $j)
  	create log entry "enable inline-power ports $(boot)"
	enable inline-power ports $(boot)
  set var j ($j + 1)
 endwhile
 endif
	if ($VAREXISTS(findIt)) then 
	delete var findIt
	endif
	if ($VAREXISTS(inputA)) then 
	delete var inputA
	endif
	 if ($VAREXISTS(listA)) then 
	delete var listA
	endif
	 if ($VAREXISTS(countA)) then 
	delete var countA
	endif
	 if ($VAREXISTS(icountBack)) then 
	delete var icountBack
	endif
	 if ($VAREXISTS(icount)) then 
	delete var icount
	endif
	 if ($VAREXISTS(value2)) then 
	delete var value2
	endif
	 if ($VAREXISTS(mPwatts)) then 
	delete var mPwatts
	endif
	 if ($VAREXISTS(slotsSplit)) then 
	delete var slotsSplit   
	 endif         
	 if ($VAREXISTS(wait)) then                             
	delete var wait   
	endif                     
	 if ($VAREXISTS(xError)) then 
	delete var xError  
	endif
	 if ($VAREXISTS(mtime)) then 
	delete var mtime      
	endif                 
	 if ($VAREXISTS(i)) then 
	delete var i  
	endif                  
	 if ($VAREXISTS(nextBp)) then 
	delete var nextBp        
	endif                            
	 if ($VAREXISTS(PS)) then 
	delete var PS   
	endif                       
	 if ($VAREXISTS(pX)) then 
	delete var pX 
	endif
	 if ($VAREXISTS(i)) then 
	delete var i 
	endif
	 if ($VAREXISTS(j)) then 
	delete var j
	endif
	 if ($VAREXISTS(boot)) then 
	delete var boot
	endif
	 if ($VAREXISTS(bP)) then 
	delete var bP
	endif
	 if ($VAREXISTS(finalList)) then 
	delete var finalList  
	endif
	 if ($VAREXISTS(slot_7)) then 
	delete var slot_7     
	endif                 
	 if ($VAREXISTS(AW_7)) then 
	delete var AW_7
	endif
	 if ($VAREXISTS(OL_7)) then 
	delete var OL_7
	endif
	 if ($VAREXISTS(poeBootTime)) then 
	delete var poeBootTime
	endif
	 if ($VAREXISTS(mP)) then 
	delete var mP
	endif
 endif
 # ----Slot_8----
 if ($VAREXISTS(slot_8)) then 
  set var slotsSplit $TCL(split ${slot_8} , )
  set var finalList $TCL(join ${slotsSplit})
  set var bP $TCL(llength ${finalList})
  	create log entry "Slot_8 has $(bP) inline-power ports"
  set var pX $TCL(expr round($AW_8 / $OL_8))
 if ($bP > $pX) then
  set var i 0
 while ($i < $bP) do
 if ($i <= $pX) then
  set var boot $TCL(lindex ${finalList} $i)
  	create log entry "enable inline-power ports $(boot)"
	enable inline-power ports $(boot)
 endif
 if ($i == $pX) then
  set var mtime $TCL(clock format [clock seconds])
   	create log entry "Wait for POE Devices to Boot! - Current Time is $(mtime)"
  set var wait $TCL(after $poeBootTime)
  set var mtime $TCL(clock format [clock seconds])
   	create log entry "Continue with script - Current Time is $(mtime)"
  set var CLI.OUT " "
  show inline-power slot 8
  set var inputA $TCL(list ${CLI.OUT})
  set var listA $TCL(split $inputA "\n")
  set var countA $TCL(llength $listA)
  set var icountBack ($countA - 0)
  set var icount 0
 while ($icount < $icountBack) do
  set var findIt $TCL(lindex $listA $icount)
  set var mP $TCL(regexp {(\d\s+Enabled\s+Operational\s+\d+\s+W\s+)(\d+)(\s+W\s+\w+)} $findIt)
 if ($mP == 1) then
  set var mPwatts $TCL(regexp -inline {(\d\s+Enabled\s+Operational\s+\d+\s+W\s+)(\d+)(\s+W\s+\w+)} $findIt)
  set var value2 $TCL(lindex $mPwatts 2)
 endif
  set var icount ($icount + 1)
 endwhile
   set var PS $TCL(expr round($AW_8 - $value2))
   set var nextBp $TCL(expr round($PS / $OL_8))
   set var pX $TCL(expr ($nextBp + $i))
 endif
  set var i ($i + 1)
 endwhile
 else 
  	create log entry "Note: Slot_8 has enough power to enable all ports"
  set var j 0
 while ($j < $bP) do
  set var boot $TCL(lindex ${finalList} $j)
  	create log entry "enable inline-power ports $(boot)"
	enable inline-power ports $(boot)
  set var j ($j + 1)
 endwhile
 endif
	if ($VAREXISTS(findIt)) then 
	delete var findIt
	endif
	if ($VAREXISTS(inputA)) then 
	delete var inputA
	endif
	 if ($VAREXISTS(listA)) then 
	delete var listA
	endif
	 if ($VAREXISTS(countA)) then 
	delete var countA
	endif
	 if ($VAREXISTS(icountBack)) then 
	delete var icountBack
	endif
	 if ($VAREXISTS(icount)) then 
	delete var icount
	endif
	 if ($VAREXISTS(value2)) then 
	delete var value2
	endif
	 if ($VAREXISTS(mPwatts)) then 
	delete var mPwatts
	endif
	 if ($VAREXISTS(slotsSplit)) then 
	delete var slotsSplit   
	 endif         
	 if ($VAREXISTS(wait)) then                             
	delete var wait   
	endif                     
	 if ($VAREXISTS(xError)) then 
	delete var xError  
	endif
	 if ($VAREXISTS(mtime)) then 
	delete var mtime      
	endif                 
	 if ($VAREXISTS(i)) then 
	delete var i  
	endif                  
	 if ($VAREXISTS(nextBp)) then 
	delete var nextBp        
	endif                            
	 if ($VAREXISTS(PS)) then 
	delete var PS   
	endif                       
	 if ($VAREXISTS(pX)) then 
	delete var pX 
	endif
	 if ($VAREXISTS(i)) then 
	delete var i 
	endif
	 if ($VAREXISTS(j)) then 
	delete var j
	endif
	 if ($VAREXISTS(boot)) then 
	delete var boot
	endif
	 if ($VAREXISTS(bP)) then 
	delete var bP
	endif
	 if ($VAREXISTS(finalList)) then 
	delete var finalList  
	endif
	 if ($VAREXISTS(slot_8)) then 
	delete var slot_8     
	endif                 
	 if ($VAREXISTS(AW_8)) then 
	delete var AW_8
	endif
	 if ($VAREXISTS(OL_8)) then 
	delete var OL_8
	endif
	 if ($VAREXISTS(poeBootTime)) then 
	delete var poeBootTime
	endif
	 if ($VAREXISTS(mP)) then 
	delete var mP
	endif
 endif
 configure cli mode persistent 
 #
 ################################################################
 # End of CLI Script
 ################################################################