<!-- This file is generated by EPICenter. Do not edit this file. -->
<script name="CLIOUT Test">
  <comments>Concept Script for Service Provisioning</comments>
  <content># @METADATASTART
#@DetailDescriptionStart
#############################################################################
# Extreme Networks(R) CLI Scripting Library
# Note:  This script has not been tested by Extreme Networks. 
# Script        : Service Creation
# Revision      : 0.2
# Last Updated  : 6 October, 2008
#
# Purpose:  Create and configure a service using BVLAN, SVLAN and ISID with Meters and Dynamic ACL
#
#
# TODO: 1. Bool Logic for tagged untagged ports on SVLAN Dynamic ACL creation
#       2. CVLAN Creation and acl for using below logic
#       3. Error checking logic for each creation and configuration field
#
#
#####################################################################
#@DetailDescriptionEnd


# @ScriptDescription &quot;Basic best practice deployment of Extreme switches. Please see Script View tab for details.&quot;
# @SectionStart ( description = &quot;Abort On Error?&quot;)
# @VariableFieldLabel ( description = &quot;Abort on error?&quot;,
#    type          = String,
#   scope       = global,
#   required    = yes,
#   validValues=[yes,no])
set var abort_when_error yes 

# @SectionEnd

# @SectionStart ( description = &quot;Services Provisioning and creation&quot;)
# @VariableFieldLabel ( description = &quot;Select In Mb Service Committed Rate Level&quot;,
#    type          = String,
#   scope       = global,
#   required    = yes,
#   validValues=[2,5,10,20,50,100,150,200,500,1000])
set var committedrate &quot;&quot; 

# @VariableFieldLabel ( description = &quot;Select In Mb Service Peak Rate Level&quot;,
#    type          = String,
#   scope       = global,
#   required    = yes,
#   validValues=[2,5,10,20,50,100,150,200,500,1000])
set var peakrate &quot;&quot; 

# @VariableFieldLabel ( description = &quot;Select In Kbits Service Burst Size&quot;,
#    type          = String,
#   scope       = global,
#   required    = yes,
#   validValues=[64,96])
set var committedburst 64	 

# @VariableFieldLabel ( description = &quot;Select In Kbits Service Burst Size&quot;,
#    type          = String,
#   scope       = global,
#   required    = yes,
#   validValues=[64,96])
set var peakburst 64

################################################################################
# BVLAN Definition
################################################################################
# @VariableFieldLabel (description = &quot;BVLAN Name&quot;,
#      type        = String,
#     scope       = global,
#      required    = yes
#    )
set var bvlanname enterNewBVLAN

# @VariableFieldLabel (description   = &quot;BVLAN Tag&quot;, type = String,
#          scope         = global
#    )
set var bvlannametag &quot;&quot;

# @VariableFieldLabel (description   = &quot;QoS Profile (eg. leave blank for default QoS)&quot;
#      type          = String,
#     scope         = global
#    )
set var bvlannameqos &quot;&quot;

# @VariableFieldLabel (description = &quot;BVLAN ports&quot;
#      type        = String
#     scope       = device
#    )
set var btaggedPorts  &quot;&quot;

################################################################################
# SVLAN Definition
################################################################################
# @VariableFieldLabel (description = &quot;SVLAN Name&quot;,
#      type        = String,
#     scope       = global,
#      required    = yes
#    )
set var svlanname enterNewSvlan

# @VariableFieldLabel (description   = &quot;SVLAN Tag&quot;, type = String,
#          scope         = global
#    )
set var svlannametag &quot;&quot;

# @VariableFieldLabel (description   = &quot;QoS Profile (eg. leave blank for default QoS)&quot;
#      type          = String,
#     scope         = global
#    )
set var svlannameqos &quot;&quot;

# @VariableFieldLabel (description = &quot;SVLAN tagged ports&quot;
#      type        = String
#     scope       = device
#    )
set var staggedPorts  &quot;&quot;

# @VariableFieldLabel (description   = &quot;SVLAN untagged ports&quot;,
#      type        = String
#     scope       = device
#    )
set var suntaggedPorts  &quot;&quot;

 
################################################################################
# ISID Definition
################################################################################
# @VariableFieldLabel (description = &quot;ISID Name&quot;,
#      type        = String,
#     scope       = global,
#      required    = yes
#    )
set var isidname enterisidname

# @VariableFieldLabel (description   = &quot;ISID Tag&quot;, type = String,
#          scope         = global, 
#          required    = yes
#    )
set var isidnametag &quot;&quot;

# @VariableFieldLabel (description   = &quot;BVLAN Name&quot;, type = String,
#          scope         = global, 
#          required    = yes
#    )

# @SectionEnd

# @MetaDataEnd
################################################################################
################################################################################
# CONFIGURATION DETAIL
################################################################################
################################################################################
# CLI MODE
################################################################################
IF ($abort_when_error == false) THEN
 configure cli mode scripting ignore-error
ELSE
  configure cli mode scripting abort-on-error
ENDIF

IF (![string equal $vendor &quot;Extreme&quot;]) THEN
   error &quot;This script is only supported for Extreme switches.&quot;
ENDIF


################################################################################
# BVLAN 1 Creation Parameters
################################################################################  
 
create bvlan $bvlanname

#} result ]} { 
#     error &quot;Error, BVLAN Already Exists.&quot;      
#   }
if {[catch {

  IF ([expr [string length $bvlannametag] &gt; 0]) THEN
    config bvlan $bvlanname tag $bvlannametag
  ENDIF

if ($TCL(string equal $bvlannameqos yes)) then
    config bvlan $bvlanname qosprofile $bvlannameqos
endif                      

IF ([expr [string length $btaggedPorts] &gt; 0]) THEN
  configure bvlan $bvlanname add port $btaggedPorts tagged 
  regexp {.*Adding EAPS ring ports to a VLAN could cause a loop.*} ${CLI.OUT} foundit
  IF ([info exists foundit]) THEN
      yes
  ENDIF 
ENDIF

# sync vlans on this device so that new vlan is shown in the client
PerformSync -scope VLAN
} result ]} { 
     error &quot;Error occured during vlan configuration. $result&quot;      
   }



################################################################################
# SVLAN 1 Creation Parameters
################################################################################  

create svlan $svlanname

if {[catch {

  IF ([expr [string length $svlannametag] &gt; 0]) THEN
    config svlan $svlanname tag $svlannametag
  ENDIF

if ($TCL(string equal $svlannameqos yes)) then
    config svlan $svlanname qosprofile $svlannameqos
endif

IF ([expr [string length $staggedPorts] &gt; 0]) THEN
  configure svlan $svlanname add port $staggedPorts tagged 
  regexp {.*Adding EAPS ring ports to a VLAN could cause a loop.*} ${CLI.OUT} foundit
  IF ([info exists foundit]) THEN
      yes
  ENDIF 
ENDIF
IF ([expr [string length $suntaggedPorts] &gt; 0]) THEN
  configure svlan $svlanname add port $suntaggedPorts untagged 
  regexp {.*Adding EAPS ring ports to a VLAN could cause a loop.*} ${CLI.OUT} foundit
  IF ([info exists foundit]) THEN
      yes
  ENDIF 
ENDIF

# sync vlans on this device so that new vlan is shown in the client
PerformSync -scope VLAN
} result ]} { 
     error &quot;Error occured during vlan configuration. $result&quot;      
   }

################################################################################
# Configure ISID Parameters
################################################################################  


create isid $isidname $isidnametag 
configure isid $isidname add svlan $svlanname
configure bvlan $bvlanname add isid $isidname


################################################################################
# Configure Meter Parameters
################################################################################  

create meter m$svlannametag
configure meter m$svlannametag committed-rate $committedrate Mbps committed-burst-size $committedburst Kb peak-rate $peakrate Mbps peak-burst-size $peakburst Kb

create traffic queue qt$svlannametag allow-egress-shaping pr-and-cr

configure traffic queue qt$svlannametag cos COS0-1 m$svlannametag
configure traffic queue qt$svlannametag cos COS2-3 m$svlannametag
configure traffic queue qt$svlannametag cos COS4-5 m$svlannametag
configure traffic queue qt$svlannametag cos COS6-7 m$svlannametag

create access-list qt$svlannametag &quot;ethernet-source-address 00:00:00:00:00:00 / 00:00:00:00:00:00&quot;  &quot;traffic-queue qt$svlannametag&quot; 

# TODO: Create bool logic for tag or untag for svlan port
configure access-list add qt$svlannametag first ports $staggedPorts ingress


# Error Check Logic, Modify and use as needed

#enable cli scripting output
#set var cli.out &quot; &quot;
#show bvlan
#set var bvlan_list $tcl(split ${cli.out} &quot;\n&quot;)
#show var bvlan_list

#set var bvlanname qosbvid

#set var count 1

#set var len $tcl(llength $bvlan_list)
#show var len
#while ($count &lt; $len) do

#set var bvlantest $tcl(lindex $bvlan_list $count)
#set var bvlantest $tcl(string replace $bvlantest 15 100 {})
#set var bvlantest $tcl(string trimright $bvlantest)
#show var bvlantest
#set var bvlanval $tcl(regexp -nocase $bvlanname $bvlantest)
#show var bvlanval
#    if ($bvlanval &gt; 0) then
#
#    set var testtrue &quot;test is true&quot;
#    show var testtrue
#
#    endif
#
#set var count ($count + 1)
#show var count
#endwhile</content>
  <creator>admin</creator>
  <contexts></contexts>
  <supprotedGroups></supprotedGroups>
  <roles>,Administrator,</roles>
  <auditLogEnabled>false</auditLogEnabled>
  <saveConfigOnExit>false</saveConfigOnExit>
  <menuScope>NONE</menuScope>
  <scriptTimeout>60</scriptTimeout>
</script>