enable cli scripting
# @METADATASTART
#@DetailDescriptionStart
#############################################################################
#
# Script        	: Interactive Automated Recovery
# Revision      	: 1.0
# EXOS Version(s)  	: 12.3.x and Newer
# Last Updated  	: April 21, 2010
#
# Purpose: 
# Interactive restore of switch configuration from a TFTP server with minimal console input. This 
# allow less sophisticated administrators to recover from a catastrophic failure. It promps the 
# user for the name of the config file, the TFTP server's IP address, the switch's IP address, and 
# the default route ... and that's it!
#
# Notes: This script assumes use of the Automated Backup Script. Filename for configuration file
# is critical in this first version. Syntax is c<switchserial>.cfg
#
# Author			: Extreme Extensibility Team
# Contact			: info@extremenetworks.com
# Contact			: www.ethernation.net (ExtremeXOS Forums)
###############################################################################
#  Change Log
#
# 	11 April 2010: Script Created
#	21 April 2010: Cleaned up formating and added comments
###############################################################################
#@DetailDescriptionEnd

# Control of loop set to run unless a success is achived. The infinite loop is by design
set var control 0

while ($control <= 1) do
	set var vryesno $read(Is this switch managed with vr-mgmt? y or n)
	set var vryesnotest $tcl(regexp $vryesno {y})
		
		if ($vryesnotest == 1) then
			set var usevr vr-mgmt
			set var dsplyvarvr "You selected vr $usevr "
			show var dsplyvarvr
		else
			set var usevr vr-default
			set var dsplyvarvr "You selected vr $usevr "
			show var dsplyvarvr
		endif
	# Initialize system variable cli.out. This will catpure next CLI command executed as a VAR
	set var cli.out 0
	
	# Running the Show Version command to get the switch Serial Number
	show version
	set var base_list $tcl(split ${cli.out} "\n")
	set var serialidx $TCL(lsearch -glob $base_list *Switch*)
	set var serial $tcl(lindex $base_list $serialidx)
	set var serial $tcl(string replace $serial 0 26 {})
	set var serial $tcl(string replace $serial 11 200 {})
	
	# Destroying cli.out
	del var "cli.out"
	# Reinitializing cli.out for clean VAR
	set var cli.out 0
	
	
	set var tftpip $read(Please enter your TFTP IP Address of your recovery server.)
	set var recoveryip $READ(Please enter your recovery IP with CIDR Mask \(e.g. /24))
	set var recoveryroute $READ(Please enter your default route IP)
	
		if (vryesnotest == 1) then
			configure vlan mgmt ipaddress $recoveryip
			configure iproute add default $recoveryroute vr vr-mgmt
		else
			configure vlan default ipaddress $recoveryip
			configure iproute add default $recoveryroute vr vr-default
		endif
		
	set var displayvar "Is the Below Config the correct file?"
	set var msg "Below is the current booted config. This config will automatically be retrieved with switch serial and reboot the switch."
	show var msg
	show var displayvar
	set var sw_current c$(serial).cfg
	show var sw_current
	set var yesno $read(Please enter y or n, anything other than y will cause the script to restart.)
	set var yesnosimpletest $tcl(regexp $yesno {y})

		if ($yesnosimpletest == 1) then
			# This script assumes out of band management. Please change VR accordingly.
			tftp get $tftpip vr $usevr c$(serial).cfg primary.cfg force-overwrite
			use config primary
			# Setting loop control for consistency. This If statement will reboot switch.
			set var control 1
			reboot
		endif
endwhile
