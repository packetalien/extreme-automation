 ################################################################
 # VARIABLES
 ################################################################
 #
 # Created by: John Padilla jpadilla@extremenetworks.com
 #
 # @ScriptDescription "Incremental PD Boot"
 #
 # To test out your variables from the command prompt run:
 #	load script poe_vars 
 #   disable cli-config-logging
 # When this script encounters errors, do you wish to abort or ignore 
 # ('abort-on-error' or 'ignore-error')?
 #
   set var ynCliModeAbortEnabled "abort-on-error"
 #
 # Set the amount of time in miliseconds it takes for a PD to reach 
 # idle watts.
 #
   set var poeBootTime 10000
 #
 # Set you slot ports:
 # * Each Port Must be add 1 by 1 separated by commas. 
 # * Do NOT trail or lead with a comma.
 # * Each list must be inclosed in quotes.
 # * This script also does NOT support a range of ports
 #
   set var slot_1 "1:1,1:2,1:3,1:4,1:5,1:6,1:7,1:8,1:9,1:10,1:11,1:12,1:13,1:14,1:15,1:16,1:17,1:18,1:19,1:20,1:21,1:22,1:23,1:24,1:25,1:26,1:27,1:28,1:29,1:30,1:31,1:32,1:33,1:34,1:35,1:36,1:37,1:38,1:39,1:40,1:41,1:42,1:43,1:44,1:45,1:46,1:47,1:48"
 # set var slot_2 "2:1,2:2,2:3,2:4,2:5,2:6,2:7,2:8,2:9,2:10,2:11,2:12,2:13,2:14,2:15,2:16,2:17,2:18,2:19,2:20,2:21,2:22,2:23,2:24,2:25,2:26,2:27,2:28,2:29,2:30,2:31,2:32,2:33,2:34,2:35,2:36,2:37,2:38,2:39,2:40,2:41,2:42,2:43,2:44,2:45,2:46,2:47,2:48"
 # set var slot_3 "3:1,3:2,3:3,3:4,3:5,3:6,3:7,3:8,3:9,3:10,3:11,3:12,3:13,3:14,3:15,3:16,3:17,3:18,3:19,3:20,3:21,3:22,3:23,3:24,3:25,3:26,3:27,3:28,3:29,3:30,3:31,3:32,3:33,3:34,3:35,3:36,3:37,3:38,3:39,3:40,3:41,3:42,3:43,3:44,3:45,3:46,3:47,3:48"  
 # set var slot_4 "4:1,4:2,4:3,4:4,4:5,4:6,4:7,4:8,4:9,4:10,4:11,4:12,4:13,4:14,4:15,4:16,4:17,4:18,4:19,4:20,4:21,4:22,4:23,4:24,4:25,4:26,4:27,4:28,4:29,4:30,4:31,4:32,4:33,4:34,4:35,4:36,4:37,4:38,4:39,4:40,4:41,4:42,4:43,4:44,4:45,4:46,4:47,4:48"
 #  set var slot_5 " "
 #  set var slot_6 " "
 #  set var slot_7 " "
 #  set var slot_8 " "
 # # What is the maximum Operator Limit configured on the slot?
 # show inline-power configuration ports <port_number>
 #
   set var OL_1 15.4
 #  set var OL_2 15.4
 #  set var OL_3 15.4
 #  set var OL_4 15.4
 #  set var OL_5 15.4
 #  set var OL_6 15.4
 #  set var OL_7 15.4
 #  set var OL_8 15.4
 # Available Watts for each slot can be found with the command:
 # show inline-power
 #
   set var AW_1 405
 #  set var AW_2 405
 #  set var AW_3 405
 #  set var AW_4 405
 #  set var AW_5 405
 #  set var AW_6 405
 #  set var AW_7 405
 #  set var AW_8 405
 #
 # The Average POE idle watts for each slot can be found with:
 # show inline-power info {detail} ports <port_list>
 # @SeparatorLine
 # 	End of custom variable definitations
 # @MetaDataEnd
 #
 ################################################################
 # ERROR HANDLING ---DO NOT MODIFY BELOW THIS LINE---
 ################################################################
 #
 # Temporarily set cli mode to ignore-error. 
 #
  configure cli mode scripting ignore-error
 #
 # Set non-persistent mode so that changes are not saved. At the end
 # of the poe_scripts.xsf file we set it back to persistent.
  configure cli mode non-persistent 
 #
 if ($VAREXISTS(slot_1)) then 
  set var temp $TCL(regexp -all {\-} $slot_1)
 if ($temp) then
        create log entry "ERROR! Sorry We don't allow a range of ports using '-' in our slot_1 variable"  
        return -200                                                                          
 endif
	disable inline-power ports $(slot_1)
 if ($STATUS == -2) then                                                                                
        create log entry "ERROR! Please check the syntax for slot_1 variable"  
	return -200                            
 endif  
 endif
 if ($VAREXISTS(slot_2)) then 
  set var temp $TCL(regexp -all {\-} $slot_2)
 if ($temp) then
        create log entry "ERROR! Sorry We don't allow a range of ports using '-' in our slot_2 variable"  
        return -200                                                                          
 endif
	disable inline-power ports $(slot_2)
 if ($STATUS == -2) then                                                                                
        create log entry "ERROR! Please check the syntax for slot_2 variable"  
	return -200                            
 endif  
 endif
 if ($VAREXISTS(slot_3)) then 
  set var temp $TCL(regexp -all {\-} $slot_3)
 if ($temp) then
        create log entry "ERROR! Sorry We don't allow a range of ports using '-' in our slot_3 variable"  
        return -200                                                                          
 endif
	disable inline-power ports $(slot_3)
 if ($STATUS == -2) then                                                                                
        create log entry "ERROR! Please check the syntax for slot_3 variable"  
	return -200                            
 endif  
 endif
 if ($VAREXISTS(slot_4)) then 
  set var temp $TCL(regexp -all {\-} $slot_4)
 if ($temp) then
        create log entry "ERROR! Sorry We don't allow a range of ports using '-' in our slot_4 variable"  
        return -200                                                                          
 endif
	disable inline-power ports $(slot_4)
 if ($STATUS == -2) then                                                                                
        create log entry "ERROR! Please check the syntax for slot_4 variable"  
	return -200                            
 endif  
 endif
 if ($VAREXISTS(slot_5)) then 
  set var temp $TCL(regexp -all {\-} $slot_5)
 if ($temp) then
        create log entry "ERROR! Sorry We don't allow a range of ports using '-' in our slot_5 variable"  
        return -200                                                                          
 endif
	disable inline-power ports $(slot_5)
 if ($STATUS == -2) then                                                                                
        create log entry "ERROR! Please check the syntax for slot_5 variable"  
	return -200                            
 endif  
 endif 
 if ($VAREXISTS(slot_6)) then 
  set var temp $TCL(regexp -all {\-} $slot_6)
 if ($temp) then
        create log entry "ERROR! Sorry We don't allow a range of ports using '-' in our slot_6 variable"  
        return -200                                                                          
 endif
	disable inline-power ports $(slot_6)
 if ($STATUS == -2) then                                                                                
        create log entry "ERROR! Please check the syntax for slot_6 variable"  
	return -200                            
 endif  
 endif
 if ($VAREXISTS(slot_7)) then 
  set var temp $TCL(regexp -all {\-} $slot_7)
 if ($temp) then
        create log entry "ERROR! Sorry We don't allow a range of ports using '-' in our slot_7 variable"  
        return -200                                                                          
 endif
	disable inline-power ports $(slot_7)
 if ($STATUS == -2) then                                                                                
        create log entry "ERROR! Please check the syntax for slot_7 variable"  
	return -200                            
 endif  
 endif
 if ($VAREXISTS(slot_8)) then 
  set var temp $TCL(regexp -all {\-} $slot_8)
 if ($temp) then
        create log entry "ERROR! Sorry We don't allow a range of ports using '-' in our slot_8 variable"  
        return -200                                                                          
 endif
	disable inline-power ports $(slot_8)
 if ($STATUS == -2) then                                                                                
        create log entry "ERROR! Please check the syntax for slot_8 variable"  
	return -200                            
 endif  
 endif
 if ($VAREXISTS(temp)) then 
	 delete var temp
 endif 
 set var cleanBootTimer $TCL(after 10000)
 if (!$match($ynCliModeAbortEnabled,"ignore-error")) then
  create log entry "CLI mode set for Ignore on error"
  configure cli mode scripting ignore-error
 else
  create log entry "CLI mode set for abort on error"
  configure cli mode scripting abort-on-error
 endif
 #
